<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.interest.ids.commoninterface.dao.sm.UserInfoMapper">
	<resultMap id="BaseResultMap"
		type="com.interest.ids.common.project.bean.sm.UserInfo">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="type_" jdbcType="VARCHAR" property="type_" />
		<result column="login_name" jdbcType="VARCHAR" property="loginName" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="qq" jdbcType="VARCHAR" property="qq" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="gender" jdbcType="CHAR" property="gender" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="status" jdbcType="TINYINT" property="status" />
		<result column="user_type" jdbcType="TINYINT" property="userType" />
		<result column="enterprise_id" jdbcType="BIGINT" property="enterpriseId" />
		<result column="create_user_id" jdbcType="BIGINT" property="createUserId" />
		<result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
		<result column="modify_user_id" jdbcType="BIGINT" property="modifyUserId" />
		<result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
	</resultMap>

	<resultMap type="java.util.Map" id="userRoleAuth">
		<result column="id" property="id" />
		<result column="login_name" property="loginName" />
		<result column="user_name" property="userName" />
		<result column="phone" property="phone" />
		<result column="gender" property="gender" />
		<result column="email" property="email" />
		<result column="status" property="status" />
		<result column="user_type" property="userType" />
		<result column="enterpriseName" property="enterpriseName" />
		<result column="enterpriseId" property="enterpriseId" />
		<result column="department" property="department" />
		<result column="departmentId" property="departmentId" />
		<result column="type_" property="type_" />
		<result column="password" property="password" />
	</resultMap>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		id, type_, login_name, password, user_name, qq, email, gender, phone,
		status, user_type,
		enterprise_id, create_user_id, create_date,
		modify_user_id, modify_date
	</sql>
	<sql id="conditionList">
		id, type_, login_name, user_name, qq, email, gender, phone,
		status, user_type,enterprise_id, create_date
	</sql>
	<!--查询用户所在的部门 -->
	<select id="selectDepartmentByUserId" parameterType="java.lang.Long"
		resultMap="userRoleAuth">
		select
		user_department.department_id departmentId,
		department.name department
		from
		ids_sm_department_t department,
		user_department user_department
		where
		department.id = user_department.department_id
		and user_department.user_id = #{value}
	</select>
	<select id="selectUserByPrimaryKey" parameterType="java.util.Map"
		resultMap="userRoleAuth">
		SELECT
		user.id id,
		user.login_name login_name,
		user.user_name user_name,
		user.phone phone,
		user.gender gender,
		user.email email,
		user.status status,
		user.password password,
		user.user_type user_type,
		user.type_ type_,
		enterprise.name enterpriseName,
		enterprise.id enterpriseId
		FROM
		ids_sm_user_info_t user,
		ids_sm_enterprise_info_t enterprise
		WHERE
		user.enterprise_id = enterprise.id
		AND user.id = #{id}
	</select>

	<select id="getDepartmentByUserId" parameterType="java.lang.Long"
		resultType="java.lang.Long">
		select department_id from user_department where user_id =
		#{value}
	</select>

	<insert id="insertUser" useGeneratedKeys="true" keyProperty="id"
		parameterType="com.interest.ids.common.project.bean.sm.UserInfo">
		insert into ids_sm_user_info_t ( login_name, password,
		user_name, qq, email,
		gender, phone, status,
		user_type, enterprise_id,
		create_user_id,
		create_date, modify_user_id, modify_date,type_
		)
		values (
		#{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		#{userName,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{gender,jdbcType=CHAR},
		#{phone,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT},
		#{userType,jdbcType=TINYINT}, #{enterpriseId,jdbcType=BIGINT},
		#{createUserId,jdbcType=BIGINT},
		#{createDate,jdbcType=TIMESTAMP},
		#{modifyUserId,jdbcType=BIGINT},
		#{modifyDate,jdbcType=TIMESTAMP},
		#{type_}
		)
	</insert>

	<delete id="deleteUserByPrimaryKey" parameterType="java.lang.Long">
		delete from
		ids_sm_user_info_t
		where
		id = #{id,jdbcType=BIGINT}
		and type_ not in
		('system')
	</delete>
	<update id="updateUserByPrimaryKeySelective" parameterType="com.interest.ids.common.project.bean.sm.UserInfo">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update ids_sm_user_info_t
		<set>
			<if test="loginName != null and loginName != ''">
				login_name = #{loginName,jdbcType=VARCHAR},
			</if>
			<if test="password != null and password != ''">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="userName != null and userName != ''">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="qq != null and qq != ''">
				qq = #{qq,jdbcType=VARCHAR},
			</if>
			<if test="email != null and email != ''">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=CHAR},
			</if>
			<if test="phone != null and phone != ''">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=TINYINT},
			</if>
			<if test="userType != null">
				user_type = #{userType,jdbcType=TINYINT},
			</if>
			<if test="enterpriseId != null">
				enterprise_id = #{enterpriseId,jdbcType=BIGINT},
			</if>
			<if test="createUserId != null">
				create_user_id = #{createUserId,jdbcType=BIGINT},
			</if>
			<if test="createDate != null">
				create_date = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyUserId != null">
				modify_user_id = #{modifyUserId,jdbcType=BIGINT},
			</if>
			<if test="modifyDate != null">
				modify_date = #{modifyDate,jdbcType=TIMESTAMP},
			</if>
			<if test="`type_` != null and `type_` != ''">
				type_ = #{type_},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateUserByPrimaryKey" parameterType="com.interest.ids.common.project.bean.sm.UserInfo">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update ids_sm_user_info_t
		set login_name =
		#{loginName,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		user_name = #{userName,jdbcType=VARCHAR},
		qq = #{qq,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		gender = #{gender,jdbcType=CHAR},
		phone = #{phone,jdbcType=VARCHAR},
		status = #{status,jdbcType=TINYINT},
		user_type = #{userType,jdbcType=TINYINT},
		enterprise_id =
		#{enterpriseId,jdbcType=BIGINT},
		create_user_id =
		#{createUserId,jdbcType=BIGINT},
		create_date =
		#{createDate,jdbcType=TIMESTAMP},
		modify_user_id =
		#{modifyUserId,jdbcType=BIGINT},
		modify_date =
		#{modifyDate,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<!-- 根据用户名和密码查询用户 -->
	<select id="selectUserMByUsernameAndPwd" parameterType="com.interest.ids.common.project.bean.sm.UserInfo"
		resultMap="BaseResultMap">
		select
		id,login_name,password,type_,enterprise_id,user_name
		from
		ids_sm_user_info_t
		where
		login_name = #{loginName,jdbcType=VARCHAR}
		and
		password = #{password,jdbcType=VARCHAR}
		and status = 0
	</select>

	<!-- 禁用用户或者启用用户 -->
	<update id="updateUserMStatus" parameterType="com.interest.ids.common.project.bean.sm.UserInfo">
		update
		ids_sm_user_info_t set status = #{status,jdbcType=TINYINT} where id =
		#{id,jdbcType=BIGINT}
	</update>

	<!-- 删除用户所有角色 -->
	<delete id="deleteAllRole" parameterType="java.lang.Long">
		delete from
		ids_sm_user_role_t where user_id = #{value}
	</delete>

	<!-- 添加用户角色 -->
	<insert id="insertUserMRole" parameterType="java.util.List">
		insert into ids_sm_user_role_t (user_id,role_id) values
		<foreach collection="list" item="s" separator=",">
			(#{s.userId},#{s.roleId})
		</foreach>

	</insert>

	<!-- 删除用户单独关联的所有权限 -->
	<delete id="deleteUserAllAuthorize" parameterType="java.lang.Long">
		delete from
		ids_sm_user_auth_t where user_id = #{value}
	</delete>

	<!-- 添加用户所有的权限 -->
	<insert id="insertUserAuthorize"
		parameterType="com.interest.ids.common.project.bean.sm.UserAuthorize">
		insert into ids_sm_user_auth_t (user_id,auth_id)
		values(#{userId},#{authorizeId})
	</insert>

	<!-- 查询所有用户 -->
	<select id="selectAllUser" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from ids_sm_user_info_t
	</select>
	<resultMap type="java.util.Map" id="conditionMap">
		<result column="id" property="id" />
		<result column="login_name" property="loginName" />
		<result column="user_name" property="userName" />
		<result column="phone" property="phone" />
		<result column="type_" property="type_" />
		<result column="status" property="status" />
		<result column="enterprise" property="enterprise" />
		<result column="department" property="department" />
	</resultMap>

	<!-- 根据任何条件查询用户 -->
	<select id="selectUserByConditions" parameterType="com.interest.ids.common.project.bean.sm.QueryUser"
		resultMap="conditionMap">
		SELECT
		user.id id,
		user.login_name login_name,
		user.user_name user_name,
		user.phone phone,
		user.status STATUS,
		user.type_ type_,
		<if test="departmentId != null">
			department.name department,
		</if>
		enterprise.name enterprise
		FROM
		ids_sm_user_info_t user,
		<if test="departmentId != null">
			ids_sm_department_t department,
			user_department user_department,
		</if>
		ids_sm_enterprise_info_t enterprise
		WHERE
		user.enterprise_id = enterprise.id
		<if test="departmentId != null">
			AND user.id = user_department.user_id
			AND user_department.department_id = department.id
			AND department.id = #{departmentId}
		</if>
		<if test="null != user">
			<if test="user.loginName != null and user.loginName != ''">
				and user.login_name like '%${user.loginName}%'
			</if>
			<if test="user.password != null and user.password != ''">
				and user.password like '%${user.password}%'
			</if>
			<if test="user.userName != null and user.userName != ''">
				and user.user_name like '%${user.userName}%'
			</if>
			<if test="user.qq != null and user.qq != ''">
				and user.qq like '%${user.qq}%'
			</if>
			<if test="user.email != null and user.email != ''">
				and user.email like '%${user.email}%'
			</if>
			<if test="user.gender != null">
				and user.gender =#{user.gender,jdbcType=CHAR}
			</if>
			<if test="user.phone != null and user.phone != ''">
				and user.phone like '%${user.phone}%'
			</if>
			<if test="user.status != null">
				and user.status = #{user.status,jdbcType=TINYINT}
			</if>
			<if test="user.userType != null">
				and user.user_type = #{user.userType,jdbcType=TINYINT}
			</if>
			<if test="user.createUserId != null">
				and user.create_user_id =
				#{user.createUserId,jdbcType=BIGINT}
			</if>
			<if test="user.createDate != null">
				and user.create_date =
				#{user.createDate,jdbcType=TIMESTAMP}
			</if>
			<if test="user.modifyUserId != null">
				and user.modify_user_id =
				#{user.modifyUserId,jdbcType=BIGINT}
			</if>
			<if test="user.modifyDate != null">
				and user.modify_date =
				#{user.modifyDate,jdbcType=TIMESTAMP}
			</if>
			<if test="user.enterpriseId != null">
				and user.enterprise_id = #{user.enterpriseId}
			</if>
		</if>
		<if test="null != page and null != page.start and null != page.pageSize">
			limit #{page.start},#{page.pageSize}
		</if>
	</select>

	<!-- 用户密码找回支持登录名/用户名/qq -->
	<select id="selectUserPwd" parameterType="com.interest.ids.common.project.bean.sm.UserInfo"
		resultType="java.lang.String">
		select password from ids_sm_user_info_t
		<where>
			<if test="loginName != null and loginName != ''">
				and login_name = #{loginName,jdbcType=VARCHAR}
			</if>
			<if test="email != null and email != ''">
				or email = #{email,jdbcType=VARCHAR}
			</if>
			<if test="userName != null and userName != ''">
				or user_name = #{userName,jdbcType=VARCHAR}
			</if>
		</where>
	</select>

	<!-- 分页显示用户信息 -->
	<select id="selectUserByPage" parameterType="com.interest.ids.common.project.bean.sm.Page"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from ids_sm_user_info_t limit #{start},#{pageSize}
	</select>

	<!-- 数据总条数 -->
	<select id="selectAllCount" parameterType="com.interest.ids.common.project.bean.sm.QueryUser"
		resultType="java.lang.Integer">
		select
		count(*)
		from
		ids_sm_user_info_t user,
		<if test="departmentId != null">
			ids_sm_department_t department,
			user_department user_department,
		</if>
		ids_sm_enterprise_info_t enterprise
		where
		user.enterprise_id = enterprise.id
		<if test="departmentId != null">
			AND user.id = user_department.user_id
			AND user_department.department_id = department.id
			AND department.id = #{departmentId}
		</if>
		<if test="null != user">
			<if test="user.loginName != null and user.loginName != ''">
				and user.login_name like '%${user.loginName}%'
			</if>
			<if test="user.password != null and user.password != ''">
				and user.password like '%${user.password}%'
			</if>
			<if test="user.userName != null and user.userName != ''">
				and user.user_name like '%${user.userName}%'
			</if>
			<if test="user.qq != null and user.qq != ''">
				and user.qq like '%${user.qq}%'
			</if>
			<if test="user.email != null and user.email != ''">
				and user.email like '%${user.email}%'
			</if>
			<if test="user.gender != null">
				and user.gender =#{user.gender,jdbcType=CHAR}
			</if>
			<if test="user.phone != null and user.phone != ''">
				and user.phone like '%${user.phone}%'
			</if>
			<if test="user.status != null">
				and user.status = #{user.status,jdbcType=TINYINT}
			</if>
			<if test="user.userType != null">
				and user.user_type = #{user.userType,jdbcType=TINYINT}
			</if>
			<if test="user.createUserId != null">
				and user.create_user_id =
				#{user.createUserId,jdbcType=BIGINT}
			</if>
			<if test="user.createDate != null">
				and user.create_date =
				#{user.createDate,jdbcType=TIMESTAMP}
			</if>
			<if test="user.modifyUserId != null">
				and user.modify_user_id =
				#{user.modifyUserId,jdbcType=BIGINT}
			</if>
			<if test="user.modifyDate != null">
				and user.modify_date =
				#{user.modifyDate,jdbcType=TIMESTAMP}
			</if>
			<if test="user.enterpriseId != null">
				and user.enterprise_id = #{user.enterpriseId}
			</if>
		</if>
	</select>

	<!-- 插入用户电站关联关系 -->
	<insert id="insertUserStation" parameterType="java.util.List">
		insert into ids_sm_user_station_t(user_id,station_code)
		values
		<foreach collection="list" item="s" separator=",">
			(#{s.userId},#{s.stationCode})
		</foreach>
	</insert>

	<!-- 修改密码 -->
	<update id="updatePwd" parameterType="com.interest.ids.common.project.bean.sm.UserInfo">
		update ids_sm_user_info_t
		set password=#{password} where id = #{id}
	</update>
	<!-- 根据多个id查询用户的名字 -->
	<select id="selectUserByIds" parameterType="Object[]" resultMap="BaseResultMap">
		select id,login_name,enterprise_id from ids_sm_user_info_t
		where id in
		<foreach collection="array" item="id" open="(" close=")"
			separator=",">
			#{id}
		</foreach>
	</select>

	<!-- 查询和某一个用户同公司的所有的用户(只有id，和用户名) -->
	<select id="selectEnterpriseUser" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select id,user_name,login_name
		from
		ids_sm_user_info_t
		where
		enterprise_id =
		(
		select enterprise_id from ids_sm_user_info_t where id
		= #{value}
		)
	</select>

	<!-- -->
	<select id="selectUserByStationCode" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select user.id id,user.user_name user_name,user.login_name
		login_name,user.enterprise_id enterprise_id
		from
		ids_sm_user_info_t
		user,
		ids_sm_user_station_t user_station
		where
		user.id =
		user_station.user_id
		and user_station.station_code = #{value}
	</select>

	<!-- 根据缺陷的id查询缺陷的审核人 -->
	<select id="selectUserByDefectId" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select user.id id, user.login_name login_name
		from
		ids_sm_user_info_t user
		where user.id =
		(
		select task_user.user_id
		from
		ids_workflow_task_user_t task_user,
		ids_workflow_task_t task,
		ids_workflow_defect_t defect
		where
		task_user.proc_id = task.proc_id
		and
		defect.proc_id = task.proc_id
		and defect.defect_id = #{value}
		limit 0,1

		)
	</select>
	<!-- 删除用户电站关联关系 -->
	<delete id="deleteUserStation" parameterType="java.lang.Long">
		delete from
		ids_sm_user_station_t where user_id = #{value}
	</delete>
	<!-- /**根据用户的登录名*/ -->
	<select id="checkLoginName" parameterType="java.lang.String"
		resultType="java.lang.Long">
		select count(id)
		from ids_sm_user_info_t where login_name = #{value}
	</select>
	<!--插入用户和部门的关联关系 -->
	<insert id="insertUserDepartment" parameterType="java.util.Map">
		insert into user_department(user_id,department_id)
		values(#{userId},#{departmentId})
	</insert>

	<!-- 查询用户的角色 -->
	<select id="selectRolesByUserId" parameterType="java.lang.Long"
		resultType="java.lang.String">
		select
		role.name
		from
		ids_sm_role_info_t role,
		ids_sm_user_role_t user_role
		where
		role.id = user_role.role_id
		and user_role.user_id = #{value}
	</select>
	<!-- 更新用户部门关联关系 -->
	<update id="updateUserDepartment" parameterType="java.util.Map">
		update user_department set department_id = #{departmentId} where
		user_id = #{id}
	</update>
	<!-- 删除用户部门管理关系 -->
	<delete id="deleteUserDepartment" parameterType="java.lang.Long">
		delete from
		user_department where user_id = #{value}
	</delete>
	
	<select id="selectAll" resultMap="BaseResultMap">
		select id,user_name,login_name
		from
		ids_sm_user_info_t
	</select>
</mapper>